
#Область ПрограммныйИнтерфейс

// Синхронизирует связанные документы.
//
Процедура СинхронизироватьЗависимыеДокументы(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписанияСинхронизаций = ОписанияСинхронизацииЗависимыхДокументов();
	
	ОписанияОшибок = Новый Массив;
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ОписаниеСинхронизации Из ОписанияСинхронизаций Цикл
			СинхронизироватьДокументыПоОписаниюСинхронизации(Документ, ОписаниеСинхронизации, ОписанияОшибок);
		КонецЦикла;
		
		Если ОписанияОшибок.Количество() > 0 Тогда
			ВызватьИсключение НСтр("ru = 'При синхронизации зависимых документов возникли ошибки.'");
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Синхронизация зависимых документов'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		
		ВывестиОшибкиВЖурналРегистрации(ОписанияОшибок);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписанияСинхронизацииЗависимыхДокументов()
	
	Описания = Новый Массив;
	Описания.Добавить(ОписаниеСинхронизацииРегистрацииРасходовЗаСчетДебиторскойЗадолженности());
	
	Возврат Описания;
	
КонецФункции

#Область ОбщиеМетодыСинхронизацииДокументов

Функция ОписаниеСинхронизацииЗависимогоДокумента()
	
	Описание = Новый Структура;
	Описание.Вставить("ИдентификаторСинхронизации", "");
	Описание.Вставить("МодульСинхронизации", ОбщегоНазначения.ОбщийМодуль("бг_Факторинг"));
	Описание.Вставить("ПроцедураЗаполненияДокумента", "");
	Описание.Вставить("ОписаниеЗависимогоДокумента", ОписаниеЗависимогоДокумента());
	Описание.Вставить("ТекстЗапросаПолученияДокументов", "");
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеЗависимогоДокумента(Имя = "", ПолноеИмя = "", Представление = "")
	
	Описание = Новый Структура;
	Описание.Вставить("Имя", Имя);
	Описание.Вставить("ПолноеИмя", ПолноеИмя);
	Описание.Вставить("Представление", Представление);
	Если Не ЗначениеЗаполнено(Имя) Тогда
		Описание.Вставить("Метаданные", Неопределено);
	Иначе
		Описание.Вставить("Метаданные", Метаданные.НайтиПоПолномуИмени(ПолноеИмя));
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Процедура СинхронизироватьДокументыПоОписаниюСинхронизации(ИнициаторСинхронизации,
	ОписаниеСинхронизации, ОписанияОшибокСинхронизации)

	Запрос = Новый Запрос;
	Запрос.Текст = ОписаниеСинхронизации.ТекстЗапросаПолученияДокументов;
	Запрос.УстановитьПараметр("ИнициаторСинхронизации", ИнициаторСинхронизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаблокироватьЗависимыеДокументы(ОписаниеСинхронизации, РезультатЗапроса, ОписанияОшибокСинхронизации) Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗависимыхДокументов = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗависимыхДокументов.Следующий() Цикл
		
		ЗависимыйДокументОбъект = СинхронизироватьДокумент(ОписаниеСинхронизации, ВыборкаЗависимыхДокументов);
		ЗаписатьДокумент(ЗависимыйДокументОбъект, ОписаниеСинхронизации, ОписанияОшибокСинхронизации);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаблокироватьЗависимыеДокументы(ОписаниеСинхронизации, ИсточникДанных, ОписанияОшибок)
	
	БлокировкаУстановлена = Истина;
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ОписаниеСинхронизации.ОписаниеЗависимогоДокумента.ПолноеИмя);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ИсточникДанных;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ЗависимыйДокумент");
		Блокировка.Заблокировать();
		
	Исключение
		
		БлокировкаУстановлена = Ложь;
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось установить блокировку на зависимые документы %1.'"),
			ОписаниеСинхронизации.ОписаниеЗависимогоДокумента.Представление);
		ОписанияОшибок.Добавить(ОписаниеОшибкиСинхронизации(ОписаниеСинхронизации, ТекстОшибки));
		
	КонецПопытки;
	
	Возврат БлокировкаУстановлена;
	
КонецФункции

Функция СинхронизироватьДокумент(ОписаниеСинхронизации, ВыборкаЗависимыхДокументов)
		
	Если ЗначениеЗаполнено(ВыборкаЗависимыхДокументов.ЗависимыйДокумент) Тогда
		ЗависимыйДокументОбъект = ВыборкаЗависимыхДокументов.ЗависимыйДокумент.ПолучитьОбъект();
	Иначе
		ЗависимыйДокументОбъект = Документы[ОписаниеСинхронизации.ОписаниеЗависимогоДокумента.Имя].СоздатьДокумент();
	КонецЕсли;
	
	Если Не ВыборкаЗависимыхДокументов.ТребуютсяЗависимыеДокументы Тогда
		ЗависимыйДокументОбъект.ПометкаУдаления = Истина;
	Иначе
		
		ЗависимыйДокументОбъект.ПометкаУдаления = Ложь;
		
		ПараметрыПроцедурыЗаполнения = Новый Массив;
		ПараметрыПроцедурыЗаполнения.Добавить(ЗависимыйДокументОбъект);
		ПараметрыПроцедурыЗаполнения.Добавить(ВыборкаЗависимыхДокументов);
		ОбщегоНазначения.ВыполнитьМетодОбъекта(ОписаниеСинхронизации.МодульСинхронизации,
			ОписаниеСинхронизации.ПроцедураЗаполненияДокумента, ПараметрыПроцедурыЗаполнения);
		
	КонецЕсли;
	
	Возврат ЗависимыйДокументОбъект;
	
КонецФункции

Функция РежимЗаписиДокумента(Документ)
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Если Документ.ПометкаУдаления Тогда
		Если Документ.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РежимЗаписи;
	
КонецФункции

Процедура ЗаписатьДокумент(Документ, ОписаниеСинхронизации, ОписанияОшибокСинхронизации)
	
	РежимЗаписи = РежимЗаписиДокумента(Документ);
	
	ДокументЗаполненКорректно = Истина;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДокументЗаполненКорректно = Документ.ПроверитьЗаполнение();
	КонецЕсли;
	
	Если ДокументЗаполненКорректно Тогда
		
		Попытка
			Документ.Записать(РежимЗаписи);
		Исключение
			ОписанияОшибокСинхронизации.Добавить(ОписаниеОшибкиСинхронизации(ОписаниеСинхронизации, ОписаниеОшибки()));
		КонецПопытки;
	
	Иначе
		
		ТекстыОшибок = Новый Массив;
		Ошибки = ПолучитьСообщенияПользователю(Истина);
		Для Индекс = 0 По Ошибки.Количество() - 1 Цикл
			ТекстыОшибок.Добавить(Ошибки[Индекс].Текст);
		КонецЦикла;
		
		ТекстОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
		ОписанияОшибокСинхронизации.Добавить(ОписаниеОшибкиСинхронизации(ОписаниеСинхронизации, ТекстОшибки));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеОшибкиСинхронизации(ОписаниеСинхронизации, ТекстОшибки, Важность = Неопределено)
	
	УровеньОшибки = УровеньЖурналаРегистрации.Ошибка;
	Если Не Важность = Неопределено Тогда
		УровеньОшибки = Важность;
	КонецЕсли;
	
	Описание = Новый Структура;
	Описание.Вставить("ИмяСобытия", ОписаниеСинхронизации.ИдентификаторСинхронизации);
	Описание.Вставить("УровеньОшибки", УровеньОшибки);
	Описание.Вставить("ОбъектМетаданных", ОписаниеСинхронизации.ОписаниеЗависимогоДокумента.Метаданные);
	Описание.Вставить("ТекстОшибки", ТекстОшибки);
	
	Возврат Описание;
	
КонецФункции

Процедура ВывестиОшибкиВЖурналРегистрации(ОписанияОшибок)
	
	Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
		ЗаписьЖурналаРегистрации(ОписаниеОшибки.ИмяСобытия, ОписаниеОшибки.УровеньОшибки,
			ОписаниеОшибки.ОбъектМетаданных,, ОписаниеОшибки.ТекстОшибки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияРегистрацииРасходовЗаСчетДебиторскойЗадолженности

Функция ОписаниеСинхронизацииРегистрацииРасходовЗаСчетДебиторскойЗадолженности()
	
	ОписаниеСинхронизации = ОписаниеСинхронизацииЗависимогоДокумента();
	ОписаниеСинхронизации.ИдентификаторСинхронизации = НСтр("ru = 'Обновление реквизитов прочих расходов.'");
	ОписаниеСинхронизации.ПроцедураЗаполненияДокумента = "ЗаполнитьРегистрациюРасходовЗаСчетДебиторскойЗадолженности";
	ОписаниеСинхронизации.ОписаниеЗависимогоДокумента = ОписаниеЗависимогоДокумента("ПрочиеДоходыРасходы",
		"Документ.ПрочиеДоходыРасходы",
		НСтр("ru = 'Прочие расходы'"));
	
	ОписаниеСинхронизации.ТекстЗапросаПолученияДокументов =
	"ВЫБРАТЬ
	|	РеквизитыФакторинга.Ссылка КАК Факторинг,
	|	ЕСТЬNULL(РеквизитыЗависимогоДокумента.Ссылка,
	|		ЗНАЧЕНИЕ(Документ.ПрочиеДоходыРасходы.ПустаяСсылка)) КАК ЗависимыйДокумент,
	|	ЕСТЬNULL(РеквизитыЗависимогоДокумента.ПометкаУдаления, ИСТИНА) КАК ЗависимыйДокументПомеченНаУдаление,
	|	(РеквизитыФакторинга.Проведен
	|		И РеквизитыФакторинга.ВидОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж))
	|		И РеквизитыФакторинга.СуммаДокумента > 0) КАК ТребуютсяЗависимыеДокументы
	|ИЗ
	|	Документ.битФакторинг КАК РеквизитыФакторинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрочиеДоходыРасходы КАК РеквизитыЗависимогоДокумента
	|		ПО РеквизитыФакторинга.Ссылка = РеквизитыЗависимогоДокумента.бг_Основание
	|ГДЕ
	|	РеквизитыФакторинга.Ссылка = &ИнициаторСинхронизации
	|	И (РеквизитыФакторинга.Проведен
	|		И РеквизитыФакторинга.ВидОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж))
	|		ИЛИ НЕ ЕСТЬNULL(РеквизитыЗависимогоДокумента.ПометкаУдаления, ИСТИНА))";

	Возврат ОписаниеСинхронизации;
	
КонецФункции

Процедура ЗаполнитьРегистрациюРасходовЗаСчетДебиторскойЗадолженности(ЗависимыйДокумент, ИсточникЗаполнения) Экспорт
	
	Если ЗависимыйДокумент.ЭтоНовый() Тогда
		ЗависимыйДокумент.УстановитьСсылкуНового(Документы.ПрочиеДоходыРасходы.ПолучитьСсылку());
	Иначе
		ЗависимыйДокумент.ПрочиеРасходы.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеквизитыФакторинга.Дата КАК Дата,
	|	РеквизитыФакторинга.Подразделение КАК Подразделение,
	|	РеквизитыФакторинга.СтатьяРасходов КАК СтатьяРасходов,
	|	РеквизитыФакторинга.КорСтатьяАктивовЗадолженностьКлиентов КАК СтатьяАктивовПассивов,
	|	РеквизитыФакторинга.Организация КАК Организация,
	|	ТаблицаРеализаций.Контрагент КАК Контрагент,
	|	ТаблицаРеализаций.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	&ИнициаторСинхронизации КАК бг_Основание,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(НастройкиСчетов.Ссылка,
	|			ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка))) КАК НастройкаСчетовУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы) КАК ХозяйственнаяОперация,
	|	СУММА(ТаблицаРеализаций.Сумма) КАК Сумма,
	|	СУММА(ТаблицаРеализаций.Сумма) КАК СуммаБезНДС,
	|	СУММА(ТаблицаРеализаций.Сумма) КАК СуммаРегл
	|ИЗ
	|	Документ.битФакторинг КАК РеквизитыФакторинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битФакторинг.ДокументыРеализации КАК ТаблицаРеализаций
	|		ПО РеквизитыФакторинга.Ссылка = ТаблицаРеализаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетов
	|		ПО НастройкиСчетов.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями)
	|			И НастройкиСчетов.Субконто1 = ТаблицаРеализаций.Контрагент
	|			И НастройкиСчетов.Субконто2 = ТаблицаРеализаций.ДоговорКонтрагента
	|			И НастройкиСчетов.Субконто3 = НЕОПРЕДЕЛЕНО
	|			И НастройкиСчетов.ВладелецНастройки = &СсылкаНаЗависимыйДокумент
	|ГДЕ
	|	РеквизитыФакторинга.Ссылка = &ИнициаторСинхронизации
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыФакторинга.Дата,
	|	РеквизитыФакторинга.Организация,
	|	РеквизитыФакторинга.Подразделение,
	|	РеквизитыФакторинга.СтатьяРасходов,
	|	ТаблицаРеализаций.Контрагент,
	|	ТаблицаРеализаций.ДоговорКонтрагента,
	|	РеквизитыФакторинга.КорСтатьяАктивовЗадолженностьКлиентов";
	
	Запрос.УстановитьПараметр("ИнициаторСинхронизации", ИсточникЗаполнения.Факторинг);
	Запрос.УстановитьПараметр("СсылкаНаЗависимыйДокумент", ЗависимыйДокумент.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	РеквизитыФакторинга = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникЗаполнения.Факторинг,
		"Организация, Дата");
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("бг_Основание", ИсточникЗаполнения.Факторинг);
	ДанныеЗаполнения.Вставить("Организация", РеквизитыФакторинга.Организация);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочиеРасходы);
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	ЗависимыйДокумент.Заполнить(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(ЗависимыйДокумент, ДанныеЗаполнения);
	ЗависимыйДокумент.Дата = РеквизитыФакторинга.Дата;
	
	Пока Выборка.Следующий() Цикл
		
		НовыйРасход = ЗависимыйДокумент.ПрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйРасход, Выборка);
		
		Если Не ЗначениеЗаполнено(НовыйРасход.НастройкаСчетовУчета) Тогда
			
			ДанныеНастройкиСчетаУчета = Новый Структура;
			ДанныеНастройкиСчетаУчета.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
			ДанныеНастройкиСчетаУчета.Вставить("Субконто1", Выборка.Контрагент);
			ДанныеНастройкиСчетаУчета.Вставить("Субконто2", Выборка.ДоговорКонтрагента);
			ДанныеНастройкиСчетаУчета.Вставить("Субконто3", Неопределено);
			ДанныеНастройкиСчетаУчета.Вставить("ВладелецНастройки", ЗависимыйДокумент.Ссылка);
			
			НовыйРасход.НастройкаСчетовУчета = СоздатьНастройкуСчетовУчета(ДанныеНастройкиСчетаУчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьНастройкуСчетовУчета(ОписаниеНастройки)
	
	НоваяНастройкаСчетовУчета = Справочники.НастройкиСчетовУчетаПрочихОпераций.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяНастройкаСчетовУчета, ОписаниеНастройки);
	
	НоваяНастройкаСчетовУчета.Записать();
	
	Возврат НоваяНастройкаСчетовУчета.Ссылка;
	
КонецФункции

#КонецОбласти

#КонецОбласти